{"version":3,"file":"file_upload.js","names":["Object","defineProperty","exports","value","uploadTransactionProof","uploadProfileImage","uploadCardProof","_multer","_interopRequireDefault","require","_path","_fs","_response","obj","__esModule","default","createStorage","destinationDir","filePrefix","multer","diskStorage","destination","req","file","callback","filename","id","trnx_reference","params","identifier","extName","path","extname","originalname","toLowerCase","newFileName","Date","now","fs","readdir","error","files","pattern","RegExp","existingFile","find","test","filePath","join","unlink","err","console","fileFilter","message","profileImageStorage","transactionProofStorage","cardProofStorage","profileImageUpload","storage","limits","fileSize","single","transactionProofUpload","array","cardProofUpload","res","next","response","Response","status","code","json"],"sources":["../../src/utils/file_upload.js"],"sourcesContent":["\"use strict\";\n\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport Response from \"./response\";\n\n// Utility function to create multer storage configuration\nconst createStorage = (destinationDir, filePrefix) => {\n    return multer.diskStorage({\n        destination: (req, file, callback) => callback(null, destinationDir),\n\n        filename: (req, file, callback) => {\n            const { id, trnx_reference } = req.params;\n            const identifier = (filePrefix === \"profile_image\") ? id : trnx_reference;\n            const extName = path.extname(file.originalname).toLowerCase();\n            const newFileName = `${filePrefix}_${identifier || Date.now()}${extName}`;\n\n            // Check if file with the same \"trnx_reference\" already exists\n            fs.readdir(destinationDir, (error, files) => {\n                if (error) return callback(error);\n\n                const pattern = new RegExp(`${filePrefix}_${identifier}`);\n                const existingFile = files.find(file => pattern.test(file));\n\n                if (existingFile) {\n                    const filePath = path.join(destinationDir, existingFile);\n                    fs.unlink(filePath, err => {\n                        if (err) console.error(`Error deleting file: ${existingFile}`, err);\n                    });\n                }\n\n                callback(null, newFileName);\n            });\n\n            /*fs.readdir(destinationDir, (error, files) => {\n                if (error) return callback(error, null);\n\n                // Loop through files and replace any that contain the \"identifier\"\n                const pattern = new RegExp(`${filePrefix}_${identifier}`);\n                const existingFile = files.find(file => pattern.test(file));\n\n                if (existingFile) {\n                    const filePath = path.join(destinationDir, existingFile);\n                    fs.unlink(filePath, err => {\n                        if (err) console.error(`Error deleting file: ${existingFile}`, err);\n                    });\n                }\n\n            });\n\n            // Proceed with saving the new file\n            callback(null, newFileName);*/\n        }\n    });\n};\n\n// File type validation\nconst fileFilter = (req, file, callback) => {\n    const extName = path.extname(file.originalname).toLowerCase();\n    if (extName === \".jpg\" || extName === \".jpeg\" || extName === \".png\") return callback(null, true);\n    return callback({ message: 'ExtensionError; Only JPEG, JPG, and PNG files are allowed.' }, false);\n};\n\n// Create storage configurations\nconst profileImageStorage = createStorage(\"./public/uploads/profile_image\", \"profile_image\");\nconst transactionProofStorage = createStorage(\"./public/uploads/crypto_proofs\", \"crypto_payment\");\nconst cardProofStorage = createStorage(\"./public/uploads/giftcard_proofs\", \"giftcard_proofs\");\n\n// Create multer upload instances\nconst profileImageUpload = multer({\n    storage: profileImageStorage,\n    fileFilter,\n    limits: { fileSize: 10 * 1024 * 1024 },\n}).single(\"profileImage\");\n\nconst transactionProofUpload = multer({\n    storage: transactionProofStorage,\n    fileFilter,\n    limits: { fileSize: 15 * 1024 * 1024 }, // 15MB\n}).array(\"transactionProof\");\n\nconst cardProofUpload = multer({\n    storage: cardProofStorage,\n    fileFilter,\n    limits: { fileSize: 15 * 1024 * 1024 }, // 15MB\n}).array(\"trnx_image\", 10); \n\n// Middleware functions\nconst uploadProfileImage = (req, res, next) => {\n    profileImageUpload(req, res, (error) => {\n        if (error) {\n            const response = new Response(\n                false,\n                410,\n                (error.message) ? `Error: ${error.message}` : error\n            );\n            return res.status(response.code).json(response);\n        }\n        return next();\n    });\n}\n\nconst uploadTransactionProof = (req, res, next) => {\n    transactionProofUpload(req, res, (error) => {\n        if (error) {\n            const response = new Response(\n                false,\n                410,\n                (error.message) ? `Error: ${error.message}` : error\n            );\n            return res.status(response.code).json(response);\n        }\n        return next();\n    });\n}\n\nconst uploadCardProof = (req, res, next) => {\n    cardProofUpload(req, res, (error) => {\n        if (error) {\n            const response = new Response(\n                false,\n                410,\n                (error.message) ? `Error: ${error.message}` : error\n            );\n            return res.status(response.code).json(response);\n        }\n        return next();\n    });\n}\n\nexport { uploadProfileImage, uploadTransactionProof, uploadCardProof };\n"],"mappings":"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","ignoreList":[]}