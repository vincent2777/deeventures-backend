{"version":3,"file":"file_upload.js","names":["Object","defineProperty","exports","value","uploadTransactionProof","uploadCardProof","_multer","_interopRequireDefault","require","_path","_fs","_response","obj","__esModule","default","createStorage","destinationDir","filePrefix","multer","diskStorage","destination","req","file","callback","filename","trnx_reference","params","Date","getTime","toString","extName","path","extname","originalname","toLowerCase","newFileName","fs","readdir","error","files","forEach","existingFile","includes","unlink","join","fileFilter","message","transactionProofStorage","cardProofStorage","transactionProofUpload","storage","limits","fileSize","single","cardProofUpload","array","res","next","response","Response","status","code","json"],"sources":["../../src/utils/file_upload.js"],"sourcesContent":["\"use strict\";\n\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport Response from \"./response\";\n\n// Utility function to create multer storage configuration\nconst createStorage = (destinationDir, filePrefix) => {\n    return multer.diskStorage({\n        destination: (req, file, callback) => {\n            callback(null, destinationDir);\n        },\n        filename: (req, file, callback) => {\n            const trnx_reference = req.params.trnx_reference || new Date().getTime().toString();\n            const extName = path.extname(file.originalname).toLowerCase();\n            const newFileName = `${filePrefix}_${trnx_reference}${extName}`;\n\n            // Check if file with the same \"trnx_reference\" already exists\n            fs.readdir(destinationDir, (error, files) => {\n                if (error) {\n                    return callback(error, null);\n                }\n\n                // Loop through files and delete any that contain the \"trnx_reference\"\n                files.forEach((existingFile) => {\n                    if (existingFile.includes(trnx_reference)) {\n                        fs.unlink(path.join(destinationDir, existingFile), (error) => {\n                            if (error) {\n                                callback(error, null);\n                            }\n                        });\n                    }\n                });\n            });\n\n            // Proceed with saving the new file\n            callback(null, newFileName);\n        }\n    });\n};\n\n// File type validation\nconst fileFilter = (req, file, callback) => {\n    const extName = path.extname(file.originalname).toLowerCase();\n    if (extName === \".jpg\" || extName === \".jpeg\" || extName === \".png\") {\n        return callback(null, true);\n    }\n    return callback({ message: 'ExtensionError; Only JPEG, JPG, and PNG files are allowed.' }, false);\n};\n\n// Create storage configurations\nconst transactionProofStorage = createStorage(\"./public/uploads/crypto_proofs\", \"crypto_payment\");\nconst cardProofStorage = createStorage(\"./public/uploads/giftcard_proofs\", \"giftcard_proofs\");\n\n// Create multer upload instances\nconst transactionProofUpload = multer({\n    storage: transactionProofStorage,\n    fileFilter,\n    limits: { fileSize: 1024 * 1024 },\n}).single(\"transactionProof\");\n\nconst cardProofUpload = multer({\n    storage: cardProofStorage,\n    fileFilter,\n    limits: { fileSize: 1024 * 1024 },\n}).array(\"trnx_image\", 10); \n\n// Middleware functions\nconst uploadTransactionProof = (req, res, next) => {\n    transactionProofUpload(req, res, (error) => {\n        if (error) {\n            const response = new Response(\n                false,\n                410,\n                (error.message) ? `Error: ${error.message}` : error\n            );\n            return res.status(response.code).json(response);\n        }\n        return next();\n    });\n}\n\nconst uploadCardProof = (req, res, next) => {\n    cardProofUpload(req, res, (error) => {\n        if (error) {\n            const response = new Response(\n                false,\n                410,\n                (error.message) ? `Error: ${error.message}` : error\n            );\n            return res.status(response.code).json(response);\n        }\n        return next();\n    });\n}\n\nexport { uploadTransactionProof, uploadCardProof };\n"],"mappings":"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","ignoreList":[]}