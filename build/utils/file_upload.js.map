{"version":3,"file":"file_upload.js","names":["Object","defineProperty","exports","value","default","_multer","_interopRequireDefault","require","_path","_fs","_response","obj","__esModule","storage","multer","diskStorage","destination","req","file","callback","filename","trnx_reference","params","Date","getTime","extName","path","extname","originalname","toLowerCase","newFileName","directoryPath","fs","readdir","error","files","forEach","existingFile","includes","unlink","join","fileFilter","message","transactionProofUpload","limits","fileSize","single","uploadTransactionProof","res","next","response","Response","status","code","json","_default"],"sources":["../../src/utils/file_upload.js"],"sourcesContent":["\"use strict\";\n\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport Response from \"./response\";\n\n// Define storage location and filename format\nconst storage = multer.diskStorage({\n    destination: (req, file, callback) => {\n        callback(null, \"./public/uploads/crypto_proofs\");\n    },\n    filename: (req, file, callback) => {\n        const { trnx_reference } = req.params || new Date().getTime();\n        const extName = path.extname(file.originalname).toLowerCase();\n        const newFileName = `crypto_payment_${trnx_reference}${extName}`;\n\n        // Check if file with the same \"trnx_reference\" already exists\n        const directoryPath = \"./public/uploads/crypto_proofs\";\n        fs.readdir(directoryPath, (error, files) => {\n            if (error) {\n                return callback(error, null)\n            }\n\n            // Loop through files and delete any that contain the \"trnx_reference\"\n            files.forEach((existingFile) => {\n                if (existingFile.includes(trnx_reference)) {\n                    fs.unlink(path.join(directoryPath, existingFile), (error) => {\n                        if (error) {\n                            callback(error, null);\n                        }\n                    });\n                }\n            });\n        });\n\n        // Proceed with saving the new file\n        callback(null, newFileName);\n    }\n});\n\n\n// File type validation\nconst fileFilter = (req, file, callback) => {\n    //  Get the File Extension name.\n    const extName = path.extname(file.originalname).toLowerCase();\n\n    if (extName === \".jpg\" || extName === \".jpeg\" || extName === \".png\") {\n        return callback(null, true);\n    }\n    return callback({ message: 'ExtensionError; Only JPEG, JPG, and PNG files are allowed.' }, false);\n};\n\n\nconst transactionProofUpload = multer({\n    storage,\n    fileFilter,\n    limits: { fileSize: 1024 * 1024 },\n}).single(\"transactionProof\");\n\nconst uploadTransactionProof = (req, res, next) => {\n    transactionProofUpload(req, res, (error) => {\n        if(error) {\n            const response = new Response(\n                false,\n                410,\n                (error.message) ? `Error: ${error.message}` : error\n            );\n            return res.status(response.code).json(response);\n        }\n        return next();\n    });\n}\n\nexport default uploadTransactionProof;"],"mappings":"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","ignoreList":[]}