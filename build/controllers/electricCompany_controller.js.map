{"version":3,"file":"electricCompany_controller.js","names":["Object","defineProperty","exports","value","default","_models","_interopRequireDefault","require","_response","_electricCompany_validator","_axios","obj","__esModule","_defineProperty","key","_toPropertyKey","enumerable","configurable","writable","t","i","_toPrimitive","r","e","Symbol","toPrimitive","call","TypeError","String","Number","ElectricCompanies","ElectricBills","MeterTypes","models","ElectricController","req","res","requestBody","body","error","ElectricCompanyValidator","createMeterTypeSchema","validate","response","Response","message","status","code","json","meterType","create","console","log","allCompanies","findAll","companiesData","values","flat","electricCompanies","keys","forEach","electricCompanyKey","push","length","meterTypes","params","electricCompany","findOne","where","provider_id","_default"],"sources":["../../src/controllers/electricCompany_controller.js"],"sourcesContent":["\"use strict\";\n\nimport models from \"../database/models\";\nimport Response from \"../utils/response\";\nimport ElectricCompanyValidator from \"../utils/validators/electricCompany_validator\";\nimport axios from \"axios\";\n\nconst { ElectricCompanies, ElectricBills, MeterTypes } = models;\n\n/**\n * @class ElectricController\n **/\nclass ElectricController {\n\n    /**\n     * @function createElectricCompany (Create a new electric company).\n     **/\n    /*static createElectricCompany = async (req, res) => {\n        try {\n            const requestBody = req.body;\n\n            //  Validate the Request Body.\n            const {error, value} = ElectricCompanyValidator.createElectricCompanySchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const electricCompany = await ElectricCompanies.create({ ...value });\n            if (!electricCompany) {\n                const response = new Response(\n                    false,\n                    409,\n                    \"Failed to create electric company.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                201,\n                'Electric company created successfully.',\n                { electricCompany }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };*/\n\n    /**\n     * @function createMeterType (Create a new meter type).\n     **/\n    static createMeterType = async (req, res) => {\n        try {\n            const requestBody = req.body;\n\n            //  Validate the Request Body.\n            const { error, value } = ElectricCompanyValidator.createMeterTypeSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const meterType = await MeterTypes.create({ ...value });\n            if (!meterType) {\n                const response = new Response(\n                    false,\n                    409,\n                    \"Failed to create meter type.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                201,\n                'Meter type created successfully.',\n                { meterType }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n\n    /**\n     * @function getElectricCompanies (Get all electric companies).\n     **/\n    static getElectricCompanies = async (req, res) => {\n        try {\n            const allCompanies = await ElectricBills.findAll();\n            const companiesData = Object.values(allCompanies).flat();\n            let electricCompanies = [];\n\n            // Extract Electric companies\n            Object.keys(companiesData).forEach(electricCompanyKey => {\n                electricCompanies.push({\n                    \"code\": companiesData[electricCompanyKey][\"provider_id\"],\n                    \"name\": companiesData[electricCompanyKey][\"bill_provider\"]\n                });\n            });\n\n            if (!electricCompanies.length) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No electric company found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                'Electric companies retrieved successfully.',\n                { electricCompanies }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    }\n\n    /**\n     * @function getMeterTypes (Get all meter types).\n     **/\n    static getMeterTypes = async (req, res) => {\n        try {\n            const meterTypes = await MeterTypes.findAll();\n            if (!meterTypes.length) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No meter type found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                'Meter types retrieved successfully.',\n                { meterTypes }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    }\n\n\n\n    /**\n     * @function getElectricCompany, (To get a single electric company).\n     **/\n    static getElectricCompany = async (req, res) => {\n        try {\n            const { code } = req.params;\n\n            const electricCompany = await ElectricBills.findOne({\n                where: { provider_id: code },\n            });\n            if (!electricCompany) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"Electric company does not exist.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"Electric company retrieved successfully.\",\n                { electricCompany }\n            );\n            return res.status(response.code).json(response);\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\"\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n    /**\n     * @function getMeterType, (To get a single meter type).\n     **/\n    static getMeterType = async (req, res) => {\n        try {\n            const { code } = req.params;\n\n            const meterType = await MeterTypes.findOne({\n                where: { code },\n            });\n            if (!meterType) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"Meter type does not exist.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"Meter type retrieved successfully.\",\n                { meterType }\n            );\n            return res.status(response.code).json(response);\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\"\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n}\n\nexport default ElectricController;"],"mappings":"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","ignoreList":[]}