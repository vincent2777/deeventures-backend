{"version":3,"file":"user_controller.js","names":["Object","defineProperty","exports","value","default","_jsonwebtoken","_interopRequireDefault","require","_bcryptjs","_sequelize","_models","_response","_auth_validator","obj","__esModule","_defineProperty","key","_toPropertyKey","enumerable","configurable","writable","t","i","_toPrimitive","r","e","Symbol","toPrimitive","call","TypeError","String","Number","crypto","Users","Wallets","ReferralWallets","Transactions","models","UserController","req","res","requestBody","body","error","AuthValidator","signUpUserSchema","validate","response","Response","message","status","code","json","user","created","findOrCreate","where","email","defaults","id","create","amount","currency_symbol","user_id","returnedUser","findOne","attributes","exclude","include","model","as","dataValues","console","log","loginUserSchema","name","phone","account_status","inputPasswordHash","createHash","update","password","digest","isPasswordMatched","token","jwt","sign","process","env","JWT_SECRET_KEY","userDataValues","users","findAll","length","params","findByPk","type","duration","query","whereClause","toLowerCase","trnx_type","Op","or","eq","now","Date","createdAt","gte","setDate","getDate","setMonth","getMonth","topTraders","Sequelize","fn","col","order","group","limit","updateUserSchema","updatedUser","role","updateUserPasswordSchema","old_password","oldPassHash","newPassHash","new_password","save","destroy","_default"],"sources":["../../src/controllers/user_controller.js"],"sourcesContent":["\"use strict\";\n\nimport jwt from \"jsonwebtoken\";\nimport bCrypt from \"bcryptjs\";\nimport { Op, Sequelize } from \"sequelize\";\nimport models from \"../database/models\";\nimport Response from \"../utils/response\";\nimport AuthValidator from \"../utils/validators/auth_validator\";\nconst crypto = require('crypto');\n\nconst { Users, Wallets, ReferralWallets, Transactions } = models;\n\n/**\n * @class UserController\n **/\nclass UserController {\n\n    /**\n     *@function signUpUser, (To create a user account).\n     **/\n    static signUpUser = async (req, res) => {\n        try {\n            const requestBody = req.body;\n            // console.log(\"REQUEST BODY::: \", requestBody);\n\n            //  Validate the Request Body.\n            const { error, value } = AuthValidator.signUpUserSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            // Generate a Six digits OTP.\n            /*const otp = otpGenerator.generate(6, {\n                digits: true,\n                lowerCaseAlphabets: false,\n                upperCaseAlphabets: false,\n                specialChars: false\n            });\n            console.log(\"GEN OTP::: \", otp);*/\n\n            //  Send OTP to users mail.\n            // await SendOTPMail.sendMail(value.name, value.email, otp);\n            // const emailResponse = await SendOTPMail.sendMail(name, email, otp);\n            // console.log(\"EMAIL RESPONSE::: \", emailResponse.response);\n\n\n            //  Check if User already exist and create a new Users.\n            const [user, created] = await Users.findOrCreate({\n                where: { email: value.email },\n                defaults: { ...value }\n            });\n            if (!created) {\n                const response = new Response(\n                    false,\n                    409,\n                    \"User already registered. Kindly login with your credentials.\"\n                );\n                return res.status(response.code).json(response);\n            }\n            const { id } = user;\n\n            // console.log('id :::: ' + id)\n\n\n            //  Create a Wallet and ReferralWallets.\n            await Wallets.create({\n                amount: 0.0,\n                currency_symbol: \"₦\",\n                user_id: id,\n            });\n            await ReferralWallets.create({\n                amount: 0.0,\n                currency_symbol: \"₦\",\n                user_id: id,\n            });\n\n            // Update the referrer's wallet with ₦50 bonus.\n            // const { amount: prevAmount } = await ReferralWallets.findOne({\n            //     where: { user_id: value.referred_by },\n            // });\n            // await ReferralWallets.update({ amount: prevAmount + 50 }, { where: { user_id: value.referred_by } });\n\n            // TODO\n            // You can notify the referrer about the added referrer's bonus\n\n            //  Get the user back.\n            const returnedUser = await Users.findOne({\n                where: { id },\n                attributes: {\n                    exclude: [\"password\"]\n                },\n                include: {\n                    model: Wallets,\n                    as: \"wallet\",\n                    attributes: {\n                        exclude: [\"user_id\", \"createdAt\", \"updatedAt\"]\n                    }\n                }\n            });\n\n            const response = new Response(\n                true,\n                201,\n                \"Successfully registered. Kindly check your email for your validation link.\",\n                { user: returnedUser.dataValues }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    /**\n     * @function loginUser, (To login a user).\n     **/\n    static loginUser = async (req, res) => {\n        try {\n            const requestBody = req.body;\n\n            //  Validate the Request Body.\n            const { error, value } = AuthValidator.loginUserSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Find the user.\n            const user = await Users.findOne({\n                where: { email: value.email },\n                include: {\n                    model: Wallets,\n                    as: \"wallet\",\n                    attributes: [\"id\", \"user_id\", \"amount\", \"currency_symbol\"]\n                }\n            });\n            if (!user) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"Incorrect email. Please check your email and try again.\"\n                );\n                return res.status(response.code).json(response);\n            }\n            const { id, name, email, phone } = user;\n\n            //  Check if users account is active.\n            if (user.account_status !== \"active\") {\n                const response = new Response(\n                    true,\n                    200,\n                    \"Account is pending. Kindly check your email for your validation link or complete your account creation process.\",\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Compare the encrypted password.\n\n            const inputPasswordHash = crypto.createHash('md5').update(value.password).digest('hex');\n            const isPasswordMatched = (inputPasswordHash === user.password);\n            // const isPasswordMatched = bCrypt.compareSync(value.password, user.password);\n            if (!isPasswordMatched) {\n                const response = new Response(\n                    false,\n                    401,\n                    \"Incorrect password. Please check your password and try again.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Create a Token that will be passed to the response.\n            const token = jwt.sign(\n                { id, name, email, phone },\n                `${process.env.JWT_SECRET_KEY}`,\n            );\n\n            //  Now remove the \"password\" before returning the User.\n            const userDataValues = user.dataValues;\n            delete userDataValues.password;\n\n            const response = new Response(\n                true,\n                200,\n                \"You're logged in successfully.\",\n                {\n                    user: userDataValues,\n                    token\n                }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    /**\n     * @function getUsers, (To get all users).\n     **/\n    static getUsers = async (req, res) => {\n        try {\n            const users = await Users.findAll({\n                attributes: {\n                    exclude: [\"password\"]\n                }\n            });\n            if (!users.length) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No user found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                'Users retrieved successfully.',\n                { users }\n            );\n            return res.status(response.code).json(response);\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    /**\n     * @function getUser, (To get a single user).\n     **/\n    static getUser = async (req, res) => {\n        try {\n            const { id } = req.params;\n\n            const user = await Users.findByPk(id, {\n                attributes: {\n                    exclude: [\"password\"],\n                },\n                include: {\n                    model: Wallets,\n                    as: \"wallet\",\n                    attributes: [\"id\", \"user_id\", \"amount\", \"currency_symbol\"]\n                }\n            });\n            if (!user) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"User does not exist.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                'User retrieved successfully.',\n                { user }\n            );\n            return res.status(response.code).json(response);\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    /**\n     * @function getTopTraders (Get top ten users with highest transaction amount).\n     **/\n    static getTopTraders = async (req, res) => {\n        try {\n\n            const { type, duration } = req.query;\n\n            let whereClause = {};\n            if (type) {\n                if (type.toLowerCase() === \"cryptocurrency\") {\n                    whereClause.trnx_type = {\n                        [Op.or]: [\n                            { [Op.eq]: \"Coin Purchase\" },\n                            { [Op.eq]: \"Coin Sale\" }\n                        ]\n                    };\n                } else if (type === \"gift_card\") {\n                    whereClause.trnx_type = \"Gift Card Sale\";\n                }\n            }\n            if (duration) {\n                const now = new Date();\n                switch (duration.toLowerCase()) {\n                    case \"day\":\n                        whereClause.createdAt = { [Op.gte]: new Date(now.setDate(now.getDate() - 1)) };\n                        break;\n                    case \"week\":\n                        whereClause.createdAt = { [Op.gte]: new Date(now.setDate(now.getDate() - 7)) };\n                        break;\n                    case \"month\":\n                        whereClause.createdAt = { [Op.gte]: new Date(now.setMonth(now.getMonth() - 1)) };\n                        break;\n                }\n            }\n\n            const topTraders = await Transactions.findAll({\n                where: whereClause,\n                attributes: [\n                    [Sequelize.fn(\"SUM\", Sequelize.col(\"trnx_amount\")), \"total_amount\"],\n                    [Sequelize.fn(\"COUNT\", Sequelize.col(\"user_id\")), \"transaction_count\"]\n                ],\n                order: [[Sequelize.fn(\"SUM\", Sequelize.col(\"trnx_amount\")), \"DESC\"]],\n                include: {\n                    model: Users,\n                    as: \"user\",\n                    attributes: [\"id\", \"full_name\", \"username\", \"country\"]\n                },\n                group: [\"user.id\"],\n                limit: 10\n            });\n            if (!topTraders.length) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No top traders found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                'Top traders retrieved successfully.',\n                { topTraders }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    }\n\n\n    /**\n     * @function updateUser, (To update a user).\n     **/\n    static updateUser = async (req, res) => {\n        try {\n            const { id } = req.params;\n            const requestBody = req.body;\n\n            //  Validate the Request Body.\n            const { error, value } = AuthValidator.updateUserSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const updatedUser = await Users.update({ ...value }, { where: { id } });\n            if (updatedUser[0] === 0) {\n                const response = new Response(\n                    false,\n                    400,\n                    \"Failed to update user.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Get the updated user back.\n            const user = await Users.findOne({\n                where: { id },\n                attributes: {\n                    exclude: [\"password\"]\n                }\n            });\n            const { name, email, phone, role } = user;\n\n            //  Create a token.\n            const token = jwt.sign(\n                { id, name, email, phone, role },\n                `${process.env.JWT_SECRET_KEY}`,\n            );\n\n            const response = new Response(\n                true,\n                200,\n                \"Profile updated successfully.\",\n                { user, token }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n    /**\n * @function updateUserPassword, (To update a user password).\n **/\n    static updateUserPassword = async (req, res) => {\n        try {\n            const { id } = req.params;\n            const requestBody = req.body;\n\n            //  Validate the Request Body.\n            const { error, value } = AuthValidator.updateUserPasswordSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            if (value.old_password) {\n                //hash old password\n                const oldPassHash = crypto.createHash('md5').update(value.old_password).digest('hex');\n\n                const user = await Users.findOne({\n                    where: { id },\n                });\n\n                if (!user) {\n                    const response = new Response(\n                        false,\n                        404,\n                        \"User not found.\"\n                    );\n                    return res.status(response.code).json(response);\n                }\n\n                // Check if the old password matches\n                if (user.password !== oldPassHash) {\n                    const response = new Response(\n                        false,\n                        400,\n                        \"Old password is incorrect.\"\n                    );\n                    return res.status(response.code).json(response);\n                }\n\n                // Hash the new password\n                const newPassHash = crypto.createHash('md5').update(value.new_password).digest('hex');\n                // Update the password in the database\n                user.password = newPassHash;\n                await user.save();\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"Password updated successfully.\"\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n    /**\n * @function deleteUser, (To delete a user).\n **/\n\n    static deleteUser = async (req, res) => {\n        const { id } = req.params;\n\n        try {\n            const user = await Users.findOne({ where: { id } });\n\n            if (!user) {\n                const response = new Response(false, 404, \"User not found.\");\n                return res.status(response.code).json(response);\n            }\n\n            await user.destroy();\n            const response = new Response(true, 200, \"Your account has been deleted!\");\n            return res.status(response.code).json(response);\n        } catch (error) {\n            console.error('Error deleting user:', error);\n            const response = new Response(false, 500, \"An error occurred while deleting the user.\");\n            return res.status(response.code).json(response);\n        }\n    }\n}\n\nexport default UserController;"],"mappings":"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","ignoreList":[]}