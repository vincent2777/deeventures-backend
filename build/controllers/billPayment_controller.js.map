{"version":3,"file":"billPayment_controller.js","names":["Object","defineProperty","exports","value","default","_models","_interopRequireDefault","require","_response","_send_email","_billPayment_validator","_axios","_datetime","_sequelize","_BillPaymentController","obj","__esModule","_defineProperty","key","_toPropertyKey","enumerable","configurable","writable","t","i","_toPrimitive","r","e","Symbol","toPrimitive","call","TypeError","String","Number","Wallets","Transactions","CableTVs","CableTVPackages","Users","ElectricCompany","Settings","models","BillPaymentController","req","res","dataBundleURL","body","dataBundleResponse","axios","get","dataBundles","data","internetServiceProviders","entries","flatMap","name","details","map","detail","NAME","ID","PRODUCT","response","Response","status","code","json","error","console","log","cableTvURL","cableTVResponse","cableTVs","channels","values","flat","electricCompaniesURL","electricCompanies","clubKonectDetails","findOne","attributes","clubConnectAPIKey","clubkonect_api","clubConnectUserID","clubkonect_userid","id","requestPayload","requestBody","JSON","stringify","getSettings","callBackURL","encodeURIComponent","BillPaymentValidator","buyAirtimeSchema","validate","message","mobileNetwork","mobileNumber","airtimeAmount","user","where","wallet","user_id","amount","warn","initiatePaymentResponse","post","prevWalletAmount","update","orderType","mobilenetwork","trnxDesc","subject","userEmail","email","getCurrentDateTime","emailResponse","SendEMail","handleSendMail","transaction","trnx_amount","trnx_type","trnx_desc","trnx_status","trnx_rate","trnx_address","trnx_image","to_receive","currency","create","buyDataBundleSchema","dataPlan","dataBundleAmount","totalAmt","productName","productname","dataCommision","mailData","split","buyCableTVSchema","cableTV","packageCode","smartCardNo","confirmedPaymentResponse","orderid","buyElectricitySchema","electricCompanyCode","meterType","meterNumber","transactionId","transactionid","checkPaymentStatus","queryPaymentResponse","remark","meterToken","metertoken","ordertype","date","convenienceFee","electricName","setTimeout","electric_company_code","meter_no","query","url","validatedDataResponse","validatedData","_default"],"sources":["../../src/controllers/billPayment_controller.js"],"sourcesContent":["\"use strict\";\n\nimport models from \"../database/models\";\nimport Response from \"../utils/response\";\nimport SendEMail from \"../utils/send_email\";\nimport BillPaymentValidator from \"../utils/validators/billPayment_validator\";\nimport axios from \"axios\";\nimport getCurrentDateTime from \"../utils/datetime\";\nimport { Op } from \"sequelize\";\n\nconst { Wallets, Transactions, CableTVs, CableTVPackages, Users, ElectricCompany, Settings } = models;\n/**\n * @class BillPaymentController\n **/\nclass BillPaymentController {\n\n    /**\n     * @function getDataBundles (Get Data Bundles).\n     **/\n    static getDataBundles = async (req, res) => {\n        try {\n            const { dataBundleURL } = req.body;\n            // console.log(\"REQUEST BODY::: \", dataBundleURL);\n\n            const dataBundleResponse = await axios.get(dataBundleURL);\n            const dataBundles = dataBundleResponse.data[\"MOBILE_NETWORK\"];\n\n            const internetServiceProviders = Object.entries(dataBundles).flatMap(([name, details]) => {\n                return details.map(detail => ({\n                    NAME: name,\n                    ID: detail.ID,\n                    PRODUCT: detail.PRODUCT\n                }));\n            });\n\n            const response = new Response(\n                true,\n                200,\n                \"Cable TV retrieved successfully\",\n                { internetServiceProviders }\n            );\n            return res.status(response.code).json(response);\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    }\n\n    /**\n     * @function getCableTV (Get Table TV).\n     **/\n    static getCableTV = async (req, res) => {\n        try {\n            const { cableTvURL } = req.body;\n            // console.log(\"REQUEST BODY::: \", cableTvURL);\n\n            const cableTVResponse = await axios.get(cableTvURL);\n            const cableTVs = cableTVResponse.data[\"TV_ID\"];\n\n            const channels = Object.values(cableTVs).flat();\n\n            const response = new Response(\n                true,\n                200,\n                \"Cable TV retrieved successfully\",\n                { channels }\n            );\n            return res.status(response.code).json(response);\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    }\n\n    /**\n     * @function getElectricCompanies (Get Electric Companies).\n     **/\n    static getElectricCompanies = async (req, res) => {\n        try {\n            const { electricCompaniesURL } = req.body;\n            // console.log(\"REQUEST BODY::: \", electricCompaniesURL);\n\n            // const electricCompaniesResponse = await axios.get(electricCompaniesURL);\n            // const electricCompaniesData = electricCompaniesResponse.data[\"ELECTRIC_COMPANY\"];\n\n            // const companiesData = Object.values(electricCompaniesData).flat();\n            let electricCompanies = [];\n\n            // const eCompanies = await ElectricCompany.findAll();\n\n            // Extract Electric companies\n            // Object.keys(companiesData).forEach(electricCompanyKey => {\n            // electricCompanies.push({\n            //     \"code\": companiesData[electricCompanyKey][\"ID\"],\n            //     \"name\": companiesData[electricCompanyKey][\"NAME\"]\n            // });\n            // });\n\n            const response = new Response(\n                true,\n                200,\n                \"Electic Companies retrieved successfully\",\n                { electricCompanies }\n            );\n            return res.status(response.code).json(response);\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    }\n\n\n\n    /**\n     * @function buyAirtime (Buy airtime).\n     **/\n    static getSettings = async () => {\n        // Fetch ClubKonect API details from Settings table\n        const clubKonectDetails = await Settings.findOne({\n            attributes: ['clubkonect_api', 'clubkonect_userid'], // Specify the columns you want\n        });\n\n        const clubConnectAPIKey = clubKonectDetails.clubkonect_api;\n        const clubConnectUserID = clubKonectDetails.clubkonect_userid;\n\n\n        if (!clubConnectAPIKey || !clubConnectUserID) {\n            console.error(\"ClubKonect API details missing in Settings table.\");\n            const response = new Response(\n                false,\n                500,\n                \"ClubKonect API details not configured. Please contact support.\"\n            );\n            return res.status(response.code).json(response);\n        }\n        console.log(`Fetched ClubKonect details: UserID: ${clubConnectUserID}, APIKey: ${clubConnectAPIKey}`);\n\n        return {\n            clubConnectAPIKey,\n            clubConnectUserID\n        }\n\n    }\n\n    /**\n     * @function buyAirtime (Buy airtime).\n     **/\n    static buyAirtime = async (req, res) => {\n        try {\n            const { id } = req.requestPayload;\n            const requestBody = req.body;\n\n            console.log(`Received request to buy airtime: UserID: ${id}, Payload: ${JSON.stringify(requestBody)}`);\n\n            // Fetch ClubKonect API details from Settings table\n            const clubKonectDetails = await this.getSettings()\n\n            const callBackURL = encodeURIComponent(\"http://localhost:5000/api/v1/bill_payment/buy_airtime\");\n\n            // Validate the Request Body\n            const { error, value } = BillPaymentValidator.buyAirtimeSchema.validate({ ...requestBody });\n            if (error) {\n                console.error(`Validation error: ${error.message}`);\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n            const { mobileNetwork, mobileNumber, airtimeAmount } = value;\n\n            // Fetch user email\n            const user = await Users.findOne({ where: { id } });\n            if (!user) {\n                console.error(`User not found for ID: ${id}`);\n                const response = new Response(\n                    false,\n                    404,\n                    \"User not found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            // Check user's wallet balance\n            const wallet = await Wallets.findOne({ where: { user_id: id } });\n            if (!wallet) {\n                console.error(\"Wallet not found.\");\n                const response = new Response(\n                    false,\n                    404,\n                    \"Wallet not found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            if (wallet.amount < airtimeAmount) {\n                console.warn(\"Insufficient wallet balance.\");\n                const response = new Response(\n                    false,\n                    300,\n                    \"Insufficient wallet balance. Kindly top-up your wallet by selling crypto or gift card.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            // Initiate payment for airtime\n            const initiatePaymentResponse = await axios.post(\n                `https://www.nellobytesystems.com/APIAirtimeV1.asp?UserID=\n                ${clubKonectDetails.clubConnectUserID}\n                &APIKey=${clubKonectDetails.clubConnectAPIKey}\n                &MobileNetwork=${mobileNetwork}\n                &Amount=${airtimeAmount}\n                &MobileNumber=${mobileNumber}`);\n\n            if (initiatePaymentResponse.data.status !== \"ORDER_RECEIVED\") {\n                console.error(`Failed to make payment. Response: ${initiatePaymentResponse.data}`);\n                const response = new Response(\n                    false,\n                    409,\n                    \"Failed to make payment. Please try again later.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            console.log(\"Payment initiated successfully.\");\n\n            // Deduct airtime amount from user's wallet\n            const prevWalletAmount = wallet.amount;\n            await Wallets.update({ amount: prevWalletAmount - airtimeAmount }, { where: { user_id: id } });\n\n            const orderType = initiatePaymentResponse.data.mobilenetwork;\n            const trnxDesc = `Buy ${orderType} airtime`;\n\n            // Send email notification\n            const subject = \"Airtime Purchase Successful\";\n            const userEmail = user.email;\n            const message = `\n            <h2>Your mobile number has been topped up</h2>\n            <p><b>Amount:</b> ₦${airtimeAmount}</p>\n            <p><b>Mobile Number:</b> ${mobileNumber}</p> \n            <p><b>Description:</b> ${trnxDesc}</p> \n            <p><b>Date:</b> ${getCurrentDateTime()}</p>`;\n\n            const emailResponse = await SendEMail.handleSendMail(userEmail, message, subject);\n            console.log(`Email sent. Response: ${emailResponse}`);\n\n            // Insert transaction record\n            const transaction = {\n                user_id: id,\n                trnx_amount: airtimeAmount,\n                trnx_type: \"Bill Payment\",\n                trnx_desc: trnxDesc,\n                trnx_status: 1,\n                trnx_rate: airtimeAmount,\n                trnx_address: mobileNumber,\n                trnx_image: \"\",\n                to_receive: airtimeAmount,\n                currency: \"NGN\",\n            };\n            await Transactions.create(transaction);\n\n            console.log(\"Transaction saved successfully.\");\n\n            const response = new Response(\n                true,\n                200,\n                `You have successfully topped up ${airtimeAmount} credit unit to ${mobileNumber}.`,\n                { transaction }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.error(`ERROR::: ${error.message}`, error);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n\n    /**\n     * @function buyDataBundle (Buy data bundle).\n     **/\n    static buyDataBundle = async (req, res) => {\n        try {\n            const { id } = req.requestPayload;\n            const requestBody = req.body;\n\n            const clubKonectDetails = await this.getSettings()\n\n            const clubConnectAPIKey = clubKonectDetails.clubConnectAPIKey;\n            const clubConnectUserID = clubKonectDetails.clubConnectUserID;\n            const callBackURL = encodeURIComponent(\"http://localhost:5000/api/v1/bill_payment/buy_data_bundle\");\n\n            //  Validate the Request Body.\n            const { error, value } = BillPaymentValidator.buyDataBundleSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n            const { mobileNetwork, dataPlan, mobileNumber, dataBundleAmount, totalAmt } = value;\n\n            //get userEmail\n            const user = await Users.findOne({\n                where: { id: id },\n            });\n            // Check user's wallet balance.\n            const wallet = await Wallets.findOne({\n                where: { user_id: id },\n            });\n            if (!wallet) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"Wallet not found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n            if (wallet.amount < dataBundleAmount) {\n                const response = new Response(\n                    false,\n                    300,\n                    \"Insufficient wallet balance. Kindly top-up your wallet by selling crypto or gift card.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            // Initiate and make payment for data.\n            const initiatePaymentResponse = await axios.post(`https://www.nellobytesystems.com/APIDatabundleV1.asp?UserID=${clubConnectUserID}&APIKey=${clubConnectAPIKey}&MobileNetwork=${mobileNetwork}&DataPlan=${dataPlan}&MobileNumber=${mobileNumber}`);\n            if (initiatePaymentResponse.data.status !== \"ORDER_RECEIVED\") {\n                const response = new Response(\n                    false,\n                    409,\n                    \"Failed to make payment. Please try again later.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            // Confirm payment\n            /*const confirmedPaymentResponse = await axios.post(`https://www.nellobytesystems.com/APIQueryV1.asp?UserID=${clubConnectUserID}&APIKey=${clubConnectAPIKey}&OrderID=${initiatePaymentResponse.data.orderid}`);\n            if (confirmedPaymentResponse.data.status !== \"ORDER_COMPLETED\") {\n                const response = new Response(\n                    false,\n                    409,\n                    \"Failed to make payment. Please try again later.\"\n                );\n                return res.status(response.code).json(response);\n            }*/\n\n            // Deduct airtime amount from user's wallet\n            const prevWalletAmount = wallet.amount;\n            await Wallets.update({ amount: prevWalletAmount - dataBundleAmount }, {\n                where: { user_id: id },\n            });\n\n            const productName = initiatePaymentResponse.data.productname;\n            const orderType = initiatePaymentResponse.data.mobilenetwork;\n            const dataCommision = totalAmt - dataBundleAmount;\n            const trnxDesc = `Purchased ${orderType} - ${productName} Data @ ${dataCommision}% commission`;\n\n            //send email\n            const subject = \"Data Purchase Successful\";\n            const userEmail = user.email;\n            const message = `\n            <h2>Your mobile number has been topped up</h2>\n            <p><b>Amount:</b> ₦${totalAmt}</p>\n            <p><b>Mobile Number:</b> ${mobileNumber}</p> \n            <p><b>Description:</b> ${trnxDesc}</p> \n            <p><b>Date:</b> ${getCurrentDateTime()}</p>`;\n\n            const emailResponse = SendEMail.handleSendMail(userEmail, message, subject)\n            const mailData = await emailResponse;\n\n            // Insert transaction information into Transactions table\n            const transaction = {\n                user_id: id,\n                trnx_amount: totalAmt,\n                trnx_type: \"Bill Payment\",\n                trnx_desc: trnxDesc,\n                trnx_status: 1,\n                trnx_rate: totalAmt,\n                trnx_address: mobileNumber,\n                trnx_image: \"\",\n                to_receive: initiatePaymentResponse.data.productname.split(\" \")[0],\n                currency: \"NGN\",\n            };\n            await Transactions.create({ ...transaction });\n\n            const response = new Response(\n                true,\n                200,\n                `Your mobile number have successfully been topped with ${initiatePaymentResponse.data.productname} data unit.`,\n                { transaction }\n            );\n            return res.status(response.code).json(response);\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    /**\n     * @function buyCableTV (Buy cable-tv subscription).\n     **/\n    static buyCableTV = async (req, res) => {\n        try {\n            const { id } = req.requestPayload;\n            const requestBody = req.body;\n            const clubKonectDetails = await this.getSettings()\n\n            const clubConnectAPIKey = clubKonectDetails.clubConnectAPIKey;\n            const clubConnectUserID = clubKonectDetails.clubConnectUserID;\n\n        \n            const callBackURL = encodeURIComponent(\"http://localhost:5000/api/v1/bill_payment/buy_cable_tv\");\n            // console.log(\"CABLE TV::: \", cableTV, packageCode);\n\n            //  Validate the Request Body.\n            const { error, value } = BillPaymentValidator.buyCableTVSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n            const { cableTV, packageCode, smartCardNo, mobileNumber, amount } = value;\n\n            // Check user's wallet balance.\n            const wallet = await Wallets.findOne({\n                where: { user_id: id },\n            });\n            if (!wallet) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"Wallet not found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n            if (wallet.amount < amount) {\n                const response = new Response(\n                    false,\n                    300,\n                    \"Insufficient wallet balance. Kindly top-up your wallet by selling crypto or gift card.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            // Initiate and make payment for data.\n            const initiatePaymentResponse = await axios.post(`https://www.nellobytesystems.com/APICableTVV1.asp?UserID=${clubConnectUserID}&APIKey=${clubConnectAPIKey}&CableTV=${cableTV}&Package=${packageCode}&SmartCardNo=${smartCardNo}&PhoneNo=${mobileNumber}&CallBackURL=${callBackURL}`);\n            if (initiatePaymentResponse.data.status !== \"ORDER_RECEIVED\") {\n                const response = new Response(\n                    false,\n                    409,\n                    \"Failed to initiate payment.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            // Confirm payment\n            const confirmedPaymentResponse = await axios.post(`https://www.nellobytesystems.com/APICableTVV1.asp?UserID=${clubConnectUserID}&APIKey=${clubConnectAPIKey}&OrderID=${initiatePaymentResponse.data.orderid}`);\n            if (confirmedPaymentResponse.data.status !== \"ORDER_COMPLETED\") {\n                const response = new Response(\n                    false,\n                    409,\n                    \"Failed to make payment. Please try again later.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            // Deduct cable tv amount from user's wallet\n            const prevWalletAmount = wallet.amount;\n            await Wallets.update({ amount: prevWalletAmount - amount }, {\n                where: { user_id: id },\n            });\n\n            // Insert transaction information into Transactions table\n            const transaction = {\n                user_id: id,\n                trnx_amount: amount,\n                trnx_type: \"Bill Payment\",\n                trnx_desc: `Monthly subscription for ${packageCode} on ${smartCardNo}.`,\n                trnx_status: 1,\n                trnx_rate: amount,\n                trnx_address: smartCardNo,\n                trnx_image: \"\",\n                to_receive: packageCode,\n                currency: \"NGN\",\n            };\n            await Transactions.create({ ...transaction });\n\n            const response = new Response(\n                true,\n                200,\n                `Your subscription for ${packageCode} on ${smartCardNo} was successful.`,\n                { transaction }\n            );\n            return res.status(response.code).json(response);\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    /**\n     * @function buyElectricity (Buy electricity subscription).\n     **/\n    static buyElectricity = async (req, res) => {\n        try {\n            const { id } = req.requestPayload;\n            const requestBody = req.body;\n            const clubKonectDetails = await this.getSettings()\n\n            const clubConnectAPIKey = clubKonectDetails.clubConnectAPIKey;\n            const clubConnectUserID = clubKonectDetails.clubConnectUserID;\n           \n            const callBackURL = encodeURIComponent(\"http://localhost:5000/api/v1/bill_payment/buy_cable_tv\");\n\n            //  Validate the Request Body.\n            const { error, value } = BillPaymentValidator.buyElectricitySchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n            const { electricCompanyCode, meterType, meterNumber, amount, totalAmt, mobileNumber } = value;\n\n            // Check user's wallet balance.\n            const wallet = await Wallets.findOne({\n                where: { user_id: id },\n            });\n\n            //get userEmail\n            const user = await Users.findOne({\n                where: { id: id },\n            });\n\n            if (!wallet) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"Wallet not found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n            if (wallet.amount < totalAmt) {\n                const response = new Response(\n                    false,\n                    300,\n                    \"Insufficient wallet balance. Kindly top-up your wallet by selling crypto or gift card.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            // Initiate and make payment for data.\n            const initiatePaymentResponse = await axios.post(`https://www.nellobytesystems.com/APIElectricityV1.asp?UserID=${clubConnectUserID}&APIKey=${clubConnectAPIKey}&ElectricCompany=${electricCompanyCode}&MeterType=${meterType}&MeterNo=${meterNumber}&Amount=${amount}&PhoneNo=${mobileNumber}&CallBackURL=${callBackURL}`);\n            console.log('initiatePaymentResponse:::', JSON.stringify(initiatePaymentResponse.data, null, 2));\n\n            const transactionId = initiatePaymentResponse.data.transactionid;\n            console.log('transactionId:::', transactionId);\n\n            if (initiatePaymentResponse.data.status !== \"ORDER_RECEIVED\") {\n                const response = new Response(\n                    false,\n                    409,\n                    \"Failed to initiate payment.\",\n                );\n                return res.status(response.code).json(response);\n            }\n\n            // Function to query payment status recursively until ORDER_COMPLETED\n            const checkPaymentStatus = async () => {\n                try {\n                    const queryPaymentResponse = await axios.get(`https://www.nellobytesystems.com/APIQueryV1.0.asp?UserID=${clubConnectUserID}&APIKey=${clubConnectAPIKey}&OrderID=${transactionId}`);\n                    console.log('queryPaymentResponse:::', JSON.stringify(queryPaymentResponse.data, null, 2));\n\n                    if (queryPaymentResponse.data.status === \"ORDER_COMPLETED\" && queryPaymentResponse.data.remark === \"TRANSACTION SUCCESSFUL\") {\n                        // Deduct airtime amount from user's wallet\n                        const prevWalletAmount = wallet.amount;\n                        await Wallets.update({ amount: prevWalletAmount - totalAmt }, {\n                            where: { user_id: id },\n                        });\n\n                        const meterToken = queryPaymentResponse.data.metertoken;\n                        const ordertype = queryPaymentResponse.data.ordertype;\n                        const date = queryPaymentResponse.data.date;\n                        const convenienceFee = totalAmt - amount;\n                        const trnxDesc = `Buy ${electricName} for Meter No. (${meterNumber}) @ NGN ${convenienceFee} convenience fee. Meter Recharge Token: ${meterToken}`;\n\n                        console.log(\"trnxDesc\", trnxDesc)\n\n                        //send email\n                        const subject = \"Electricity Bill Subscription Successful\";\n                        const userEmail = user.email;\n                        const message = `\n                        <h2>Your Electricity Bill Subscription was successful</h2>\n                        <p><b>Amount:</b> ₦${totalAmt}</p>\n                        <p><b>Mobile Number:</b> ${mobileNumber}</p> \n                        <p><b>Provider:</b> ${ordertype}</p> \n                        <p><b>Meter Number:</b> ${meterNumber}</p> \n                        <p><b>Description:</b> ${trnxDesc}</p> \n                        <p><b>Date:</b> ${date}</p>`;\n\n                        const emailResponse = SendEMail.handleSendMail(userEmail, message, subject)\n                        console.log(\"EMAIL RESPONSE::: \", emailResponse.response);\n\n                        // Insert transaction information into Transactions table\n                        const transaction = {\n                            user_id: id,\n                            trnx_amount: amount,\n                            trnx_type: \"Bill Payment\",\n                            trnx_desc: trnxDesc,\n                            trnx_status: 1,\n                            trnx_rate: totalAmt,\n                            trnx_address: meterNumber,\n                            trnx_image: \"\",\n                            to_receive: amount,\n                            currency: \"NGN\",\n                        };\n                        await Transactions.create({ ...transaction });\n\n                        const response = new Response(\n                            true,\n                            200,\n                            `Your electricity purchase of ${amount} on ${meterNumber} was successful.`,\n                            { transaction }\n                        );\n                        return res.status(response.code).json(response);\n                    } else if (queryPaymentResponse.data.status === \"ORDER_RECEIVED\" || queryPaymentResponse.data.remark === \"Network Unresponsive\" || queryPaymentResponse.data.remark === \"Network Unresponsive\") {\n                        // Check again after a delay (e.g., every 5 seconds)\n                        setTimeout(checkPaymentStatus, 3000); // 5000 milliseconds = 5 seconds\n                    } else {\n                        const response = new Response(\n                            false,\n                            409,\n                            \"Failed to make payment. Please try again later.\"\n                        );\n                        return res.status(response.code).json(response);\n                    }\n                } catch (error) {\n                    console.log(`ERROR querying payment status::: ${error}`);\n\n                    const response = new Response(\n                        false,\n                        500,\n                        'Server error, please try again later.'\n                    );\n                    return res.status(response.code).json(response);\n                }\n            };\n\n            // Start checking payment status\n            await checkPaymentStatus();\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n    /**\n* @function validateMeterNO (To get a name tied to meter number).\n**/\n    static validateMeterNo = async (req, res) => {\n        try {\n            // Read and parse the raw POST data\n            const { electric_company_code, meter_no } = req.query;\n            const clubKonectDetails = await this.getSettings()\n\n            const clubConnectAPIKey = clubKonectDetails.clubConnectAPIKey;\n            const clubConnectUserID = clubKonectDetails.clubConnectUserID;\n\n\n            const url = `https://www.nellobytesystems.com/APIVerifyElectricityV1.asp?UserID=${clubConnectUserID}&APIKey=${clubConnectAPIKey}&ElectricCompany=${electric_company_code}&MeterNo=${meter_no}`;\n\n            // Make a request to the external API\n            const validatedDataResponse = await axios.get(url);\n\n            // Extract only the data part of the response\n            const validatedData = validatedDataResponse.data;\n            // console.error(`DATA::: ${electric_company_code}`);\n            // console.error(`DATA::: ${meter_no} `);\n\n            if (validatedData.status === \"INVALID_ElectricCompany\" || validatedData.status === \"INVALID_METERNO\") {\n                const response = new Response(\n                    false,\n                    409,\n                    \"Failed to validate meter no. ERROR: \" + validatedData.status\n                );\n                return res.status(response.code).json(response);\n            }\n            const response = new Response(\n                true,\n                200,\n                \"Meter Number Validated Successfully\",\n                { validatedData }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.error(`ERROR::: ${error}`);\n            const response = new Response(\n                false,\n                500,\n                \"Server error, please try again later.\"\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n}\n\nexport default BillPaymentController;"],"mappings":"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","ignoreList":[]}