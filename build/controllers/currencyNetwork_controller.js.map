{"version":3,"file":"currencyNetwork_controller.js","names":["Object","defineProperty","exports","value","default","_models","_interopRequireDefault","require","_response","_currencyNetwork_validator","_currency_validator","obj","__esModule","_defineProperty","key","_toPropertyKey","enumerable","configurable","writable","t","i","_toPrimitive","r","e","Symbol","toPrimitive","call","TypeError","String","Number","CurrencyNetworks","models","CurrencyNetworkController","req","res","requestBody","body","error","CurrencyNetworkValidator","createCurrencyNetworkSchema","validate","response","Response","message","status","code","json","transaction","create","console","log","currencyNetworks","findAll","length","id","params","currencyNetwork","findByPk","updateCurrencyNetworkSchema","updatedCryptoNetwork","update","where","deletedCryptoNetwork","destroy","_default"],"sources":["../../src/controllers/currencyNetwork_controller.js"],"sourcesContent":["\"use strict\";\n\nimport models from \"../database/models\";\nimport Response from \"../utils/response\";\nimport CurrencyNetworkValidator from \"../utils/validators/currencyNetwork_validator\";\nimport CurrencyValidator from \"../utils/validators/currency_validator\";\n\nconst { CurrencyNetworks } = models;\n\n/**\n * @class CurrencyNetworkController\n **/\nclass CurrencyNetworkController {\n\n    /**\n     * @function createCryptoNetwork (Create a new crypto network).\n     **/\n    static createCryptoNetwork = async (req, res) => {\n        try {\n            const requestBody = req.body;\n            // console.log(\"REQUEST PAYLOAD::: \", requestBody);\n\n            //  Validate the Request Body.\n            const {error, value} = CurrencyNetworkValidator.createCurrencyNetworkSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const transaction = await CurrencyNetworks.create({ ...value });\n            if (!transaction) {\n                const response = new Response(\n                    false,\n                    409,\n                    \"Failed to create crypto network.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                201,\n                'Crypto network created successfully.',\n                { transaction }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    /**\n     * @function getCryptoNetworks, (Get all crypto networks).\n     **/\n    static getCryptoNetworks = async (req, res) => {\n        try {\n            const currencyNetworks = await CurrencyNetworks.findAll();\n            if (!currencyNetworks.length) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No crypto network found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                'Currency networks retrieved successfully.',\n                { currencyNetworks }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    /**\n     * @function getCryptoNetwork, (Get a single crypto network).\n     **/\n    static getCryptoNetwork = async (req, res) => {\n        try {\n            const { id } = req.params;\n\n            const currencyNetwork = await CurrencyNetworks.findByPk(id);\n            if (!currencyNetwork) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No currency network found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                'Currency network retrieved successfully.',\n                { currencyNetwork }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    /**\n     * @function updateCryptoNetwork (Update a crypto network).\n     **/\n    static updateCryptoNetwork = async (req, res) => {\n        try {\n            const { id } = req.params;\n            const requestBody = req.body;\n\n            //  Validate the Request Body.\n            const { error, value } = CurrencyNetworkValidator.updateCurrencyNetworkSchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const updatedCryptoNetwork = await CurrencyNetworks.update({ ...value }, { where: { id } });\n            if (updatedCryptoNetwork[0] === 0) {\n                const response = new Response(\n                    false,\n                    400,\n                    \"Failed to update currency network.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Get the updated crypto network back.\n            const currencyNetwork = await CurrencyNetworks.findByPk(id);\n\n            const response = new Response(\n                true,\n                200,\n                \"Currency network updated successfully.\",\n                { currencyNetwork }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    /**\n     * @function deleteCryptoNetwork (Delete a crypto network).\n     **/\n    static deleteCryptoNetwork = async (req, res) => {\n        try {\n            const { id } = req.params;\n\n            const deletedCryptoNetwork = await CurrencyNetworks.destroy({ where: { id } });\n            if (deletedCryptoNetwork === 0) {\n                const response = new Response(\n                    false,\n                    400,\n                    \"Failed to delete currency network.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"Currency network deleted successfully.\"\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n}\n\nexport default CurrencyNetworkController;"],"mappings":"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","ignoreList":[]}