{"version":3,"file":"currency_controller.js","names":["Object","defineProperty","exports","value","default","_models","_interopRequireDefault","require","_response","_currency_validator","_sequelize","obj","__esModule","_defineProperty","key","_toPropertyKey","enumerable","configurable","writable","t","i","_toPrimitive","r","e","Symbol","toPrimitive","call","TypeError","String","Number","Currencies","CurrencyNetworks","models","CurrencyController","req","res","requestBody","body","error","CurrencyValidator","createCurrencySchema","validate","response","Response","message","status","code","json","currency","create","console","log","currencies","findAll","length","currenciesWithNetworks","Promise","all","map","eachCurrency","currencyNetworks","where","id","Op","in","currency_network_id","attributes","dataValues","currency_networks","params","findByPk","updateCurrencySchema","updatedCurrency","update","deletedCurrency","destroy","_default"],"sources":["../../src/controllers/currency_controller.js"],"sourcesContent":["\"use strict\";\n\nimport models from \"../database/models\";\nimport Response from \"../utils/response\";\nimport CurrencyValidator from \"../utils/validators/currency_validator\";\nimport { Op } from \"sequelize\";\n\nconst { Currencies, CurrencyNetworks } = models;\n\n/**\n * @class CurrencyController\n **/\nclass CurrencyController {\n\n    /**\n     * @function createCurrency (Create a new currency).\n     **/\n    static createCurrency = async (req, res) => {\n        try {\n            const requestBody = req.body;\n            // console.log(\"REQUEST PAYLOAD::: \", requestBody);\n\n            //  Validate the Request Body.\n            const {error, value} = CurrencyValidator.createCurrencySchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const currency = await Currencies.create({ ...value });\n            if (!currency) {\n                const response = new Response(\n                    false,\n                    409,\n                    \"Failed to create currency.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                201,\n                'Currency created successfully.',\n                { currency }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    };\n\n\n    /**\n     * @function getCurrencies (Get all currencies).\n     **/\n    static getCurrencies = async (req, res) => {\n        try {\n            const currencies = await Currencies.findAll();\n            if (!currencies.length) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"No currency found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const currenciesWithNetworks = await Promise.all(currencies.map(async (eachCurrency) => {\n\n                // Find all CurrencyNetworks matching the IDs\n                const currencyNetworks = await CurrencyNetworks.findAll({\n                    where: {\n                        id: {\n                            [Op.in]: eachCurrency.currency_network_id\n                        }\n                    },\n                    attributes: [\"id\", \"network_name\", \"network_address\"] // Add all the necessary attributes you need\n                });\n\n                return { ...eachCurrency.dataValues, currency_networks: currencyNetworks }\n            }));\n\n            const response = new Response(\n                true,\n                200,\n                'Currencies retrieved successfully.',\n                { currencies: currenciesWithNetworks }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    }\n\n\n    /**\n     * @function getCurrency (Get single currency).\n     **/\n    static getCurrency = async (req, res) => {\n        try {\n            const { id } = req.params;\n\n            const currency = await Currencies.findByPk(id);\n            if (!currency) {\n                const response = new Response(\n                    false,\n                    404,\n                    \"Currency not found.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            // Find all CurrencyNetworks matching the IDs\n            const currencyNetworks = await CurrencyNetworks.findAll({\n                where: {\n                    id: {\n                        [Op.in]: currency.currency_network_id\n                    }\n                },\n                attributes: [\"id\", \"network_name\", \"network_address\", \"network_image\"] // Add all the necessary attributes you need\n            });\n\n            const response = new Response(\n                true,\n                200,\n                'Currency retrieved successfully.',\n                { ...currency.dataValues, currency_networks: currencyNetworks },\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    }\n\n\n    /**\n     * @function updateCurrency (Update a currency).\n     **/\n    static updateCurrency = async (req, res) => {\n        try {\n            const { id } = req.params;\n            const requestBody = req.body;\n\n            //  Validate the Request Body.\n            const { error, value } = CurrencyValidator.updateCurrencySchema.validate(requestBody);\n            if (error) {\n                const response = new Response(\n                    false,\n                    400,\n                    `${error.message}`\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const updatedCurrency = await Currencies.update({ ...value }, { where: { id } });\n            if (updatedCurrency[0] === 0) {\n                const response = new Response(\n                    false,\n                    400,\n                    \"Failed to update currency.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            //  Get the updated currency back.\n            const currency = await Currencies.findByPk(id);\n\n            const response = new Response(\n                true,\n                200,\n                \"Currency updated successfully.\",\n                { currency }\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    }\n\n\n    /**\n     * @function deleteCurrency (Delete a currency).\n     **/\n    static deleteCurrency = async (req, res) => {\n        try {\n            const { id } = req.params;\n\n            const deletedCurrency = await Currencies.destroy({ where: { id } });\n            if (deletedCurrency === 0) {\n                const response = new Response(\n                    false,\n                    400,\n                    \"Failed to delete currency.\"\n                );\n                return res.status(response.code).json(response);\n            }\n\n            const response = new Response(\n                true,\n                200,\n                \"Currency deleted successfully.\"\n            );\n            return res.status(response.code).json(response);\n\n        } catch (error) {\n            console.log(`ERROR::: ${error}`);\n\n            const response = new Response(\n                false,\n                500,\n                'Server error, please try again later.'\n            );\n            return res.status(response.code).json(response);\n        }\n    }\n}\n\nexport default CurrencyController;"],"mappings":"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","ignoreList":[]}