{"version":3,"file":"app.js","names":["_express","_interopRequireDefault","require","_dotenv","_response","_routes","_fs","obj","__esModule","default","dotenv","config","app","express","fs","existsSync","mkdirSync","recursive","use","static","json","urlencoded","extended","req","res","next","header","method","status","get","response","Response","code","routes","PORT","process","env","HOST","BASE_URL","listen","console","log"],"sources":["../src/app.js"],"sourcesContent":["\"use strict\";\n\nimport express from \"express\";\nimport dotenv from 'dotenv';\nimport Response from \"./utils/response\";\nimport routes from \"./routes\";\nimport fs from \"fs\";\ndotenv.config();\n\n//  Set Up Express App.\nconst app = express();\n\n\n// Create the directory \"./public/images/transaction_proof\" if the do not exist.\n!fs.existsSync(`./public/uploads/crypto_proofs`) && fs.mkdirSync(`./public/uploads/crypto_proofs`, { recursive: true });\n\n//  Public Folder.\napp.use(express.static('./public'));\n\n\n//  parse JSON-encoded bodies and URL-encoded bodies\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n\n// To avoid CORS errors, we need to allow some Header accesses as done below\napp.use((req, res, next) => {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\n    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');\n\n    if (req.method === \"OPTIONS\") {\n        res.header(\"Access-Control-Allow-Methods\", \"POST, PUT, PATCH, DELETE, GET\");\n        return res.status(200).json({});\n    }\n    next();\n});\n\n\n//  Create a Default or Root Route.\napp.get('/', (req, res) => {\n    const response = new Response(\n        true,\n        200,\n        'Welcome to DeeVentures API V1.'\n    );\n    res.status(response.code).json(response);\n});\n\n//  Create other Routes.\napp.use('/api/v1', routes);\n\nconst PORT = process.env.PORT || 5000;\nconst HOST = process.env.HOST || 'localhost';\nconst BASE_URL = process.env.BASE_URL || `http://${HOST}:${PORT}`;\n\napp.listen(PORT, () => {\n    console.log(`Express server running on port: ${PORT}, Please kindly visit ${BASE_URL}`);\n});"],"mappings":"AAAA,YAAY;;AAEZ,IAAAA,QAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,OAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,SAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,OAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,GAAA,GAAAL,sBAAA,CAAAC,OAAA;AAAoB,SAAAD,uBAAAM,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AACpBG,eAAM,CAACC,MAAM,CAAC,CAAC;;AAEf;AACA,MAAMC,GAAG,GAAG,IAAAC,gBAAO,EAAC,CAAC;;AAGrB;AACA,CAACC,WAAE,CAACC,UAAU,CAAE,gCAA+B,CAAC,IAAID,WAAE,CAACE,SAAS,CAAE,gCAA+B,EAAE;EAAEC,SAAS,EAAE;AAAK,CAAC,CAAC;;AAEvH;AACAL,GAAG,CAACM,GAAG,CAACL,gBAAO,CAACM,MAAM,CAAC,UAAU,CAAC,CAAC;;AAGnC;AACAP,GAAG,CAACM,GAAG,CAACL,gBAAO,CAACO,IAAI,CAAC,CAAC,CAAC;AACvBR,GAAG,CAACM,GAAG,CAACL,gBAAO,CAACQ,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;;AAG/C;AACAV,GAAG,CAACM,GAAG,CAAC,CAACK,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EACxBD,GAAG,CAACE,MAAM,CAAC,6BAA6B,EAAE,GAAG,CAAC;EAC9CF,GAAG,CAACE,MAAM,CAAC,8BAA8B,EAAE,+DAA+D,CAAC;EAC3GF,GAAG,CAACE,MAAM,CAAC,8BAA8B,EAAE,wBAAwB,CAAC;EAEpE,IAAIH,GAAG,CAACI,MAAM,KAAK,SAAS,EAAE;IAC1BH,GAAG,CAACE,MAAM,CAAC,8BAA8B,EAAE,+BAA+B,CAAC;IAC3E,OAAOF,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC;EACnC;EACAK,IAAI,CAAC,CAAC;AACV,CAAC,CAAC;;AAGF;AACAb,GAAG,CAACiB,GAAG,CAAC,GAAG,EAAE,CAACN,GAAG,EAAEC,GAAG,KAAK;EACvB,MAAMM,QAAQ,GAAG,IAAIC,iBAAQ,CACzB,IAAI,EACJ,GAAG,EACH,gCACJ,CAAC;EACDP,GAAG,CAACI,MAAM,CAACE,QAAQ,CAACE,IAAI,CAAC,CAACZ,IAAI,CAACU,QAAQ,CAAC;AAC5C,CAAC,CAAC;;AAEF;AACAlB,GAAG,CAACM,GAAG,CAAC,SAAS,EAAEe,eAAM,CAAC;AAE1B,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AACrC,MAAMG,IAAI,GAAGF,OAAO,CAACC,GAAG,CAACC,IAAI,IAAI,WAAW;AAC5C,MAAMC,QAAQ,GAAGH,OAAO,CAACC,GAAG,CAACE,QAAQ,IAAK,UAASD,IAAK,IAAGH,IAAK,EAAC;AAEjEtB,GAAG,CAAC2B,MAAM,CAACL,IAAI,EAAE,MAAM;EACnBM,OAAO,CAACC,GAAG,CAAE,mCAAkCP,IAAK,yBAAwBI,QAAS,EAAC,CAAC;AAC3F,CAAC,CAAC","ignoreList":[]}